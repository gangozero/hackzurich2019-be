// Code generated by go-swagger; DO NOT EDIT.

package game

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetGameStateHandlerFunc turns a function with the right signature into a get game state handler
type GetGameStateHandlerFunc func(GetGameStateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGameStateHandlerFunc) Handle(params GetGameStateParams) middleware.Responder {
	return fn(params)
}

// GetGameStateHandler interface for that can handle valid get game state params
type GetGameStateHandler interface {
	Handle(GetGameStateParams) middleware.Responder
}

// NewGetGameState creates a new http.Handler for the get game state operation
func NewGetGameState(ctx *middleware.Context, handler GetGameStateHandler) *GetGameState {
	return &GetGameState{Context: ctx, Handler: handler}
}

/*GetGameState swagger:route GET /game/{game_id}/state game getGameState

Get state of the game

*/
type GetGameState struct {
	Context *middleware.Context
	Handler GetGameStateHandler
}

func (o *GetGameState) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetGameStateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
